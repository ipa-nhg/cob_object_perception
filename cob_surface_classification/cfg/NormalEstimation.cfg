#!/usr/bin/env python
PACKAGE = "cob_surface_classification"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

# visualization
gen.add("visualize_edge_detection", bool_t, 0, "Visualize edge detection results",  False)
gen.add("visualize_normal_estimation", bool_t, 0, "Visualize estimated normals",  False)

# normal estimation config
ne_normal_estimation_method_enum = gen.enum([ gen.const("None",						int_t, 0, "Normal estimation off"),
												gen.const("FastEdgeAware",			int_t, 1, "Fast direct edge-aware normal estimation"),
												gen.const("CrossProduct",			int_t, 2, "Cross product based normal estimation"),
												gen.const("CrossProductEdgeAware",	int_t, 4, "Edge-aware cross product based normal estimation"),
												gen.const("IntegralImage",			int_t, 8, "Integral image based normal estimation"),
												gen.const("IntegralImageEdgeAware",	int_t, 16, "Edge-aware integral image based normal estimation"),
												gen.const("VanillaPCL",				int_t, 32, "Vanilla PCL normal estimation")],
										"Computation method for normal estimation")
gen.add("ne_normal_estimation_method", int_t, 0, "Computation method for normal estimation", 1, 0, 32, edit_method=ne_normal_estimation_method_enum)
gen.add("ne_cross_pixel_radius", int_t, 0, "Radius of pixel neighborhood, only used with cross product based normal estimation variants [pix]", 4, 1, 128)
gen.add("ne_cross_pixel_step", int_t, 0, "Pixel step width within the neighborhood mask, only used with cross product based normal estimation variants [pix]", 2, 1, 128)
gen.add("ne_cross_circle_step", int_t, 0, "Circle step width within the neighborhood mask, only used with cross product based normal estimation variants [pix]", 2, 1, 128)
ne_integral_normal_estimation_method_enum = gen.enum([ gen.const("CovarianceMatrix",int_t, 0, "COVARIANCE_MATRIX"),
												gen.const("Average3DGradient",		int_t, 1, "AVERAGE_3D_GRADIENT"),
												gen.const("AverageDepthChange",		int_t, 2, "AVERAGE_DEPTH_CHANGE"),
												gen.const("Simple3DGradient",		int_t, 3, "SIMPLE_3D_GRADIENT")],
										"Computation algorithm used with integral image based normal estimation variants")
gen.add("ne_integral_normal_estimation_method", int_t, 0, "Computation algorithm used with integral image based normal estimation variants", 1, 0, 3, edit_method=ne_integral_normal_estimation_method_enum)
gen.add("ne_integral_normal_smoothing_size", double_t, 0, "Smoothing area width, only used with integral image based normal estimation variants [pix]", 10., 1., 100.)
gen.add("ne_vanillapcl_kneighbors", int_t, 0, "Number of considered neighbors, only used with vanilla PCL normal estimation", 64, 1, 1024)

# edge detection config
edge_noise_reduction_mode_enum = gen.enum([ gen.const("NoFilter",		int_t, 0, "No noise reduction"),
												gen.const("Gaussian",	int_t, 1, "Gaussian filtering"),
												gen.const("Bilateral",	int_t, 2, "Bilateral filtering")],
										"Noise suppression mode on differentiated images")
gen.add("edge_noise_reduction_mode", int_t, 0, "Noise suppression mode on differentiated images", 1, 0, 2, edit_method=edge_noise_reduction_mode_enum)
gen.add("edge_noise_reduction_kernel_size", int_t, 0, "Kernel size of noise reduction filter, usually 3, 5 or 7", 3, 3, 15)
gen.add("edge_depth_step_factor", double_t, 0, "Factor for depth dependent depth edge (step) verification, corresponds to minimum depth step in [m] at 1m distance (default ~ 0.01 - 0.02)", 0.01, 0.001, 0.1)
gen.add("edge_min_detectable_edge_angle", double_t, 0, "Minimum angle of surrounding surfaces around an edge, in [deg]", 45., 1., 180.)
gen.add("edge_use_adaptive_scan_line", bool_t, 0, "Use fixed width scan line at certain depth (false) or adapt scan line width to surrounding edges, i.e. not crossing edges (true, default)", True)
gen.add("edge_min_scan_line_width", int_t, 0, "Minimum scan line width used for surface slope approximation, in [pixels] (typically around 5pix)", 5, 1, 100)
gen.add("edge_max_scan_line_width", int_t, 0, "Maximum scan line width used for surface slope approximation, in [pixels] (typically between 20 and 40pix)", 30, 1, 200)
gen.add("edge_scan_line_width_at_2m", int_t, 0, "Scan_line_width is the length of the scan line left and right of the query pixel at 2m distance (using linear model with scan line width at 0.5m of 5 pixels)", 15, 1, 100)

# artificially added noise
gen.add("simulated_sensor_noise_sigma", double_t, 0, "Standard deviation of artificially added Gaussian noise to the point measurements (measured in [m])", 0., 0., 0.1)

#gen.add("int_param", int_t, 0, "", 50, 0, 100)
#gen.add("double_param", double_t, 0, "", .5, 0, 1)
#gen.add("str_param", str_t, 0, "", "Hello World")
#gen.add("bool_param", bool_t, 0, "", True)

exit(gen.generate(PACKAGE, "surface_classification", "NormalEstimation"))